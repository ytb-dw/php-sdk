<?php
/**
 * Exemple d'utilisation compl√®te du SDK YTB-DW PHP
 */

require_once 'vendor/autoload.php';
// Ou si vous n'utilisez pas Composer:
// require_once 'src/YtbDwClient.php';

use YtbDw\YtbDwClient;
use YtbDw\YtbDwException;

// Configuration
$apiKey = 'ytb-dw-votre-cle-api'; // Remplacez par votre vraie cl√© API
$youtubeUrl = 'https://youtube.com/watch?v=dQw4w9WgXcQ';

try {
    // Initialiser le client SDK
    $client = new YtbDwClient($apiKey);
    
    echo "üîç R√©cup√©ration des informations de la vid√©o...\n";
    echo "URL: $youtubeUrl\n\n";
    
    // R√©cup√©rer les m√©tadonn√©es de la vid√©o
    $videoInfo = $client->getVideoInfo($youtubeUrl);
    
    echo "üì∫ Informations de la vid√©o:\n";
    echo "‚îú‚îÄ‚îÄ Titre: " . $videoInfo->getTitle() . "\n";
    echo "‚îú‚îÄ‚îÄ Dur√©e: " . $videoInfo->getDuration() . "\n";
    echo "‚îú‚îÄ‚îÄ Auteur: " . $videoInfo->getUploader() . "\n";
    echo "‚îú‚îÄ‚îÄ Formats audio disponibles: " . ($videoInfo->hasAudioFormats() ? "‚úÖ Oui" : "‚ùå Non") . "\n";
    echo "‚îî‚îÄ‚îÄ Formats vid√©o disponibles: " . ($videoInfo->hasVideoFormats() ? "‚úÖ Oui" : "‚ùå Non") . "\n\n";
    
    // Afficher tous les formats disponibles
    echo "üìã Formats disponibles:\n";
    foreach ($videoInfo->getFormats() as $index => $format) {
        echo "‚îú‚îÄ‚îÄ " . ($index + 1) . ". " . ($format['type'] ?? 'Type inconnu');
        if (isset($format['quality'])) {
            echo " (" . $format['quality'] . ")";
        }
        echo "\n";
    }
    echo "\n";
    
    // T√©l√©charger en audio MP3
    if ($videoInfo->hasAudioFormats()) {
        echo "üéµ T√©l√©chargement audio en cours...\n";
        $audioResult = $client->downloadAudio($youtubeUrl, '192kbps', 'downloads/audio.mp3');
        echo "‚úÖ Audio t√©l√©charg√© avec succ√®s!\n";
        echo "‚îú‚îÄ‚îÄ Fichier: " . $audioResult->getFilePath() . "\n";
        echo "‚îú‚îÄ‚îÄ Taille: " . $audioResult->getFileSizeFormatted() . "\n";
        echo "‚îî‚îÄ‚îÄ Format: " . ($audioResult->isAudio() ? "üéµ Audio" : "üé¨ Vid√©o") . "\n\n";
    }
    
    // T√©l√©charger en vid√©o MP4
    if ($videoInfo->hasVideoFormats()) {
        echo "üé¨ T√©l√©chargement vid√©o en cours...\n";
        $videoResult = $client->downloadVideo($youtubeUrl, '720', 'downloads/video.mp4');
        echo "‚úÖ Vid√©o t√©l√©charg√©e avec succ√®s!\n";
        echo "‚îú‚îÄ‚îÄ Fichier: " . $videoResult->getFilePath() . "\n";
        echo "‚îú‚îÄ‚îÄ Taille: " . $videoResult->getFileSizeFormatted() . "\n";
        echo "‚îî‚îÄ‚îÄ Format: " . ($videoResult->isVideo() ? "üé¨ Vid√©o" : "üéµ Audio") . "\n\n";
    }
    
    echo "üéâ Tous les t√©l√©chargements termin√©s!\n";
    
} catch (YtbDwException $e) {
    echo "‚ùå Erreur API (Code " . $e->getCode() . "):\n";
    echo "Message technique: " . $e->getMessage() . "\n";
    echo "Description: " . $e->getFriendlyMessage() . "\n\n";
    
    // Gestion sp√©cifique des erreurs courantes
    switch ($e->getCode()) {
        case 401:
            echo "üí° Solution: V√©rifiez que votre cl√© API '$apiKey' est correcte.\n";
            break;
        case 404:
            echo "üí° Solution: V√©rifiez que l'URL YouTube '$youtubeUrl' est valide et accessible.\n";
            break;
        case 429:
            echo "üí° Solution: Attendez ou upgradez votre compte pour avoir plus de quota.\n";
            break;
    }
    
} catch (Exception $e) {
    echo "‚ùå Erreur g√©n√©rale: " . $e->getMessage() . "\n";
}

// Exemple d'utilisation avanc√©e avec gestion des erreurs sp√©cifiques
echo "\n" . str_repeat("=", 60) . "\n";
echo "Exemple avanc√© avec gestion d'erreurs sp√©cifiques\n";
echo str_repeat("=", 60) . "\n\n";

function downloadWithRetry(YtbDwClient $client, string $url, string $format = 'audio', int $maxRetries = 3): ?YtbDw\YtbDwDownloadResult 
{
    $attempts = 0;
    
    while ($attempts < $maxRetries) {
        try {
            $attempts++;
            echo "üîÑ Tentative $attempts/$maxRetries...\n";
            
            if ($format === 'audio') {
                return $client->downloadAudio($url);
            } else {
                return $client->downloadVideo($url);
            }
            
        } catch (YtbDwException $e) {
            echo "‚ùå √âchec de la tentative $attempts: " . $e->getFriendlyMessage() . "\n";
            
            // Ne pas retry si c'est une erreur de cl√© API ou d'URL invalide
            if (in_array($e->getCode(), [401, 404])) {
                throw $e;
            }
            
            // Attendre avant le prochain essai
            if ($attempts < $maxRetries) {
                $waitTime = $attempts * 2; // Backoff progressif
                echo "‚è≥ Attente de {$waitTime}s avant le prochain essai...\n\n";
                sleep($waitTime);
            }
        }
    }
    
    throw new YtbDwException("√âchec apr√®s $maxRetries tentatives");
}

// Test de la fonction avec retry
try {
    $client2 = new YtbDwClient($apiKey);
    $result = downloadWithRetry($client2, $youtubeUrl, 'audio', 3);
    echo "‚úÖ T√©l√©chargement r√©ussi avec retry: " . $result->getFilePath() . "\n";
} catch (YtbDwException $e) {
    echo "‚ùå √âchec final: " . $e->getFriendlyMessage() . "\n";
}

// Exemple de traitement par lot
echo "\n" . str_repeat("=", 60) . "\n";
echo "Exemple de traitement par lot\n";
echo str_repeat("=", 60) . "\n\n";

$urlsToBatch = [
    'https://youtube.com/watch?v=dQw4w9WgXcQ',
    'https://youtube.com/watch?v=fJ9rUzIMcZQ',
    // Ajoutez d'autres URLs ici
];

function batchDownload(YtbDwClient $client, array $urls, string $format = 'audio'): array 
{
    $results = [];
    
    foreach ($urls as $index => $url) {
        echo "üì• Traitement " . ($index + 1) . "/" . count($urls) . ": $url\n";
        
        try {
            $videoInfo = $client->getVideoInfo($url);
            echo "‚îú‚îÄ‚îÄ Titre: " . $videoInfo->getTitle() . "\n";
            
            $filename = "batch_" . ($index + 1) . "_" . preg_replace('/[^a-zA-Z0-9]/', '_', $videoInfo->getTitle() ?? 'video');
            $filename .= $format === 'audio' ? '.mp3' : '.mp4';
            
            $downloadResult = $client->download($url, $format, null, "downloads/batch/$filename");
            
            $results[] = [
                'url' => $url,
                'success' => true,
                'file' => $downloadResult->getFilePath(),
                'size' => $downloadResult->getFileSizeFormatted(),
                'title' => $videoInfo->getTitle()
            ];
            
            echo "‚îî‚îÄ‚îÄ ‚úÖ T√©l√©charg√©: " . $downloadResult->getFilePath() . " (" . $downloadResult->getFileSizeFormatted() . ")\n\n";
            
            // Pause entre les t√©l√©chargements pour respecter les limites
            sleep(1);
            
        } catch (YtbDwException $e) {
            echo "‚îî‚îÄ‚îÄ ‚ùå Erreur: " . $e->getFriendlyMessage() . "\n\n";
            
            $results[] = [
                'url' => $url,
                'success' => false,
                'error' => $e->getFriendlyMessage(),
                'code' => $e->getCode()
            ];
            
            // Arr√™ter le traitement par lot si quota d√©pass√©
            if ($e->getCode() === 429) {
                echo "üõë Quota d√©pass√©, arr√™t du traitement par lot.\n";
                break;
            }
        }
    }
    
    return $results;
}

try {
    $client3 = new YtbDwClient($apiKey);
    $batchResults = batchDownload($client3, $urlsToBatch, 'audio');
    
    echo "üìä R√©sum√© du traitement par lot:\n";
    $successful = array_filter($batchResults, fn($r) => $r['success']);
    $failed = array_filter($batchResults, fn($r) => !$r['success']);
    
    echo "‚îú‚îÄ‚îÄ R√©ussites: " . count($successful) . "/" . count($batchResults) . "\n";
    echo "‚îî‚îÄ‚îÄ √âchecs: " . count($failed) . "/" . count($batchResults) . "\n";
    
} catch (Exception $e) {
    echo "‚ùå Erreur lors du traitement par lot: " . $e->getMessage() . "\n";
}

?>
